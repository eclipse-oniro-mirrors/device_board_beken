diff --git a/foundation/communication/softbus_lite/discovery/BUILD.gn b/foundation/communication/softbus_lite/discovery/BUILD.gn
index 23cdab5..c96569c 100755
--- a/foundation/communication/softbus_lite/discovery/BUILD.gn
+++ b/foundation/communication/softbus_lite/discovery/BUILD.gn
@@ -29,6 +29,7 @@ if (ohos_kernel_type == "liteos_m") {
       "//base/security/deviceauth/interfaces/innerkits/deviceauth_lite",
       "//third_party/cJSON",
       "$ohos_third_party_dir/lwip_sack/include",
+      "//base/security/huks/interfaces/innerkits/huks_lite",
     ]
   }
   discovery_sources = [
diff --git a/foundation/communication/softbus_lite/discovery/coap/source/coap_discover.c b/foundation/communication/softbus_lite/discovery/coap/source/coap_discover.c
index a85fc5c..be6c244 100644
--- a/foundation/communication/softbus_lite/discovery/coap/source/coap_discover.c
+++ b/foundation/communication/softbus_lite/discovery/coap/source/coap_discover.c
@@ -436,7 +436,7 @@ static void CoapConnectionChangedHandler(int state, WifiLinkedInfo* info)
     (void)info;
     CoapWriteMsgQueue(state);
 }
-
+/*
 void CoapGetWifiIp(char *ip, int length)
 {
     struct netif *netif = NULL;
@@ -458,6 +458,27 @@ void CoapGetWifiIp(char *ip, int length)
     (void)length;
     return;
 }
+*/
+void CoapGetWifiIp(char *ip, int length)
+{
+    void *netif = NULL;
+    int ret;
+
+    netif = net_get_sta_handle();
+    if (netif == NULL) {
+        return;
+    }
+
+    ip4_addr_t ipAddr;
+
+    ret = net_get_if_ip_addr(&ipAddr, netif);
+    if (ret == 0) {
+        inet_ntop(AF_INET, &ipAddr, ip, INET_ADDRSTRLEN);
+    }
+    (void)length;
+    return;
+}
+
 #else
 typedef enum {
     STATUS_UP,
diff --git a/foundation/communication/softbus_lite/trans_service/BUILD.gn b/foundation/communication/softbus_lite/trans_service/BUILD.gn
index 319cdef..f98f096 100755
--- a/foundation/communication/softbus_lite/trans_service/BUILD.gn
+++ b/foundation/communication/softbus_lite/trans_service/BUILD.gn
@@ -30,6 +30,7 @@ if (ohos_kernel_type == "liteos_m") {
       "//third_party/bounds_checking_function/include",
       "$ohos_third_party_dir/lwip_sack/include",
       "$ohos_third_party_dir/mbedtls/include",
+      "//base/security/huks/interfaces/innerkits/huks_lite",
     ]
 
     defines = [ "SOFTBUS_DEBUG" ]
diff --git a/code-1.1.0-git/foundation/communication/softbus_lite/trans_service/include/utils/lwip_if.h b/foundation/communication/softbus_lite/trans_service/include/utils/lwip_if.h
new file mode 100644
index 0000000..9ef4504
--- /dev/null
+++ b/foundation/communication/softbus_lite/trans_service/include/utils/lwip_if.h
@@ -0,0 +1,87 @@
+#ifndef __LWIP_IF_H__
+#define __LWIP_IF_H__
+
+#include <sys/select.h>
+
+struct ip4_addr {
+  unsigned int addr;
+};
+typedef struct ip4_addr ip4_addr_t;
+
+int lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen);
+int lwip_bind(int s, const struct sockaddr *name, socklen_t namelen);
+int lwip_shutdown(int s, int how);
+int lwip_getpeername (int s, struct sockaddr *name, socklen_t *namelen);
+int lwip_getsockname (int s, struct sockaddr *name, socklen_t *namelen);
+int lwip_getsockopt (int s, int level, int optname, void *optval, socklen_t *optlen);
+int lwip_setsockopt (int s, int level, int optname, const void *optval, socklen_t optlen);
+int lwip_close(int s);
+int lwip_connect(int s, const struct sockaddr *name, socklen_t namelen);
+int lwip_listen(int s, int backlog);
+int lwip_recv(int s, void *mem, size_t len, int flags);
+int lwip_read(int s, void *mem, size_t len);
+int lwip_recvfrom(int s, void *mem, size_t len, int flags,
+      struct sockaddr *from, socklen_t *fromlen);
+int lwip_send(int s, const void *dataptr, size_t size, int flags);
+int lwip_sendmsg(int s, const struct msghdr *message, int flags);
+int lwip_sendto(int s, const void *dataptr, size_t size, int flags,
+    const struct sockaddr *to, socklen_t tolen);
+int lwip_socket(int domain, int type, int protocol);
+int lwip_write(int s, const void *dataptr, size_t size);
+int lwip_writev(int s, const struct iovec *iov, int iovcnt);
+int lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
+                struct timeval *timeout);
+int lwip_ioctl(int s, long cmd, void *argp);
+int lwip_fcntl(int s, int cmd, int val);
+
+#define accept(s,addr,addrlen)                    lwip_accept(s,addr,addrlen)
+/** @ingroup socket */
+#define bind(s,name,namelen)                      lwip_bind(s,name,namelen)
+/** @ingroup socket */
+#define shutdown(s,how)                           lwip_shutdown(s,how)
+/** @ingroup socket */
+#define getpeername(s,name,namelen)               lwip_getpeername(s,name,namelen)
+/** @ingroup socket */
+#define getsockname(s,name,namelen)               lwip_getsockname(s,name,namelen)
+/** @ingroup socket */
+#define setsockopt(s,level,optname,opval,optlen)  lwip_setsockopt(s,level,optname,opval,optlen)
+/** @ingroup socket */
+#define getsockopt(s,level,optname,opval,optlen)  lwip_getsockopt(s,level,optname,opval,optlen)
+/** @ingroup socket */
+#define closesocket(s)                            lwip_close(s)
+/** @ingroup socket */
+#define connect(s,name,namelen)                   lwip_connect(s,name,namelen)
+/** @ingroup socket */
+#define listen(s,backlog)                         lwip_listen(s,backlog)
+/** @ingroup socket */
+#define recv(s,mem,len,flags)                     lwip_recv(s,mem,len,flags)
+/** @ingroup socket */
+#define recvfrom(s,mem,len,flags,from,fromlen)    lwip_recvfrom(s,mem,len,flags,from,fromlen)
+/** @ingroup socket */
+#define send(s,dataptr,size,flags)                lwip_send(s,dataptr,size,flags)
+/** @ingroup socket */
+#define sendmsg(s,message,flags)                  lwip_sendmsg(s,message,flags)
+/** @ingroup socket */
+#define sendto(s,dataptr,size,flags,to,tolen)     lwip_sendto(s,dataptr,size,flags,to,tolen)
+/** @ingroup socket */
+#define socket(domain,type,protocol)              lwip_socket(domain,type,protocol)
+/** @ingroup socket */
+#define select(maxfdp1,readset,writeset,exceptset,timeout)     lwip_select(maxfdp1,readset,writeset,exceptset,timeout)
+
+
+#define inet_ntop(af,src,dst,size) \
+    (((af) == AF_INET) ? ip4addr_ntoa_r((const ip4_addr_t*)(src),(dst),(size)) : NULL)
+#define inet_pton(af,src,dst) \
+    (((af) == AF_INET) ? ip4addr_aton((src),(ip4_addr_t*)(dst)) : 0)
+
+#define inet_ntoa(addr) ip4addr_ntoa((addr))
+
+#define lwip_ntohs(x) lwip_htons(x)
+
+#define htons(x) lwip_htons(x)
+#define ntohs(x) lwip_ntohs(x)
+#define htonl(x) lwip_htonl(x)
+#define ntohl(x) lwip_ntohl(x)
+
+
+#endif
diff --git a/foundation/communication/softbus_lite/trans_service/source/libdistbus/auth_conn_manager.c b/foundation/communication/softbus_lite/trans_service/source/libdistbus/auth_conn_manager.c
index e77dcdd..0f6a7aa 100644
--- a/foundation/communication/softbus_lite/trans_service/source/libdistbus/auth_conn_manager.c
+++ b/foundation/communication/softbus_lite/trans_service/source/libdistbus/auth_conn_manager.c
@@ -15,8 +15,8 @@
 
 #include "auth_conn_manager.h"
 
-#include <arpa/inet.h>
-#if defined(__LITEOS_M__) || defined(__LITEOS_RISCV__)
+//#include <arpa/inet.h>
+#if defined(__LITEOS_M__X) || defined(__LITEOS_RISCV__)
 #include <cmsis_os.h>
 #include <lwip/sockets.h>
 #else
@@ -25,7 +25,10 @@
 #include <signal.h>
 #include <sys/socket.h>
 #include <sys/time.h>
+#include <netinet/in.h>
 #endif
+#include "lwip_if.h"
+
 #include <stdbool.h>
 #include <string.h>
 #include <sys/ioctl.h>
diff --git a/foundation/communication/softbus_lite/trans_service/source/libdistbus/tcp_session_manager.c b/foundation/communication/softbus_lite/trans_service/source/libdistbus/tcp_session_manager.c
index 63edbe6..e14fd12 100644
--- a/foundation/communication/softbus_lite/trans_service/source/libdistbus/tcp_session_manager.c
+++ b/foundation/communication/softbus_lite/trans_service/source/libdistbus/tcp_session_manager.c
@@ -23,6 +23,8 @@
 #include "pms_interface.h"
 #include "pms_types.h"
 #endif
+#include "lwip_if.h"
+
 #include <malloc.h>
 #include <mbedtls/base64.h>
 #include <signal.h>
diff --git a/foundation/communication/softbus_lite/trans_service/source/utils/tcp_socket.c b/foundation/communication/softbus_lite/trans_service/source/utils/tcp_socket.c
index 8f958f3..5565e58 100644
--- a/foundation/communication/softbus_lite/trans_service/source/utils/tcp_socket.c
+++ b/foundation/communication/softbus_lite/trans_service/source/utils/tcp_socket.c
@@ -16,11 +16,13 @@
 
 #include <arpa/inet.h>
 
-#if defined(__LITEOS_M__) || defined(__LITEOS_RISCV__)
+#if defined(__LITEOS_M__X) || defined(__LITEOS_RISCV__)
 #include <lwip/sockets.h>
 #else
 #include <sys/socket.h>
 #endif
+#include <netinet/in.h>
+#include "lwip_if.h"
 
 #include <errno.h>
 #include <netinet/in.h>
diff --git a/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_device_config.h b/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_device_config.h
index b7037a7..fae12d0 100644
--- a/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_device_config.h
+++ b/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_device_config.h
@@ -46,7 +46,7 @@
  * If the maximum number is reached, an error will be returned. In this case, you must delete at least one
  * configuration before you can add new ones. \n
  */
-#define WIFI_MAX_CONFIG_SIZE 10
+#define WIFI_MAX_CONFIG_SIZE 5
 /**
  * @brief Indicates the value of <b>networkId</b> when the configuration file is unavailable.
  *
diff --git a/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_hotspot_config.h b/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_hotspot_config.h
index 1f0b766..8911ff1 100644
--- a/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_hotspot_config.h
+++ b/foundation/communication/wifi_lite/interfaces/wifiservice/wifi_hotspot_config.h
@@ -43,7 +43,7 @@
 /**
  * @brief Defines the maximum number of stations connected to a hotspot.
  */
-#define WIFI_MAX_STA_NUM 6
+#define WIFI_MAX_STA_NUM 1
 
 /**
  * @brief Enumerates received signal strength indicator (RSSI) levels.
